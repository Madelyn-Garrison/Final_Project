---
title: "Modeling"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
library(tidyverse)
library(tidymodels)
```


```{r}
my_data<-read_csv("diabetes_binary_health_indicators_BRFSS2015.csv")|>
    mutate(Fruits=as.factor(ifelse(Fruits==0, "No fruit", "Fruit")),
         Stroke=as.factor(ifelse(Stroke==0, "No stroke", "Stroke")),
         Smoker=as.factor(ifelse(Smoker==0, "No 100 cigs", "100 cigs")),
         HeartDiseaseorAttack=as.factor(ifelse(HeartDiseaseorAttack==0, "No CHD/MI", "CHD/MI")),
         PhysActivity=as.factor(ifelse(PhysActivity==0, "No physical activity past 30 days", "Physical activity past 30 days")),
         CholCheck=as.factor(ifelse(CholCheck==0, "No cholesterol check in 5 years", "Cholesterol check in past 5 years")),
         HighChol=as.factor(ifelse(HighChol==0, "No high cholesterol", "High cholesterol")),
         HighBP=as.factor(ifelse(HighBP==0, "No high blood pressure", "High blood pressure")),
         Diabetes_binary=ifelse(Diabetes_binary==0, "No diabetes", "Diabetes"),
         Veggies=as.factor(ifelse(Veggies==0, "No veggies", "Veggies")),
         HvyAlcoholConsump=as.factor(ifelse(HvyAlcoholConsump==0, "Not heavy Drinker", "Heavy Drinker")),
         AnyHealthcare=as.factor(ifelse(AnyHealthcare==0, "No healthcare", "Healthcare")),
         GenHlth=as.factor(ifelse(GenHlth==1, "Excellent", ifelse(GenHlth==2, "Very good", ifelse(GenHlth==3, "Good", ifelse(GenHlth==4, "Fair", "Poor"))))),
         DiffWalk=as.factor(ifelse(DiffWalk==0, "Can walk", "Difficult walking")),
         Sex=as.factor(ifelse(Sex==0, "female", "male")),
         Age=as.factor(Age),
         Education=as.factor(Education),
         Income=as.factor(Income)
         )
```

```{r}
set.seed(15)
data_split <- initial_split(my_data, prop = 0.70)
data_train <- training(data_split)
data_test <- testing(data_split)
data_5_fold <- vfold_cv(data_train, 5)

```

```{r}
tree_rec_1 <- recipe(Diabetes_binary ~ HighBP + HighChol + BMI + AnyHealthcare + Age, data = data_train) |>
  step_dummy(HighBP,HighChol,AnyHealthcare,Age)
tree_rec_2 <- recipe(Diabetes_binary ~ HighBP + HighChol + BMI + AnyHealthcare + Age + GenHlth, data = data_train) |>
  step_dummy(HighBP,HighChol,AnyHealthcare,Age,GenHlth)
tree_rec_3 <- recipe(Diabetes_binary ~ HighBP + HighChol + BMI + AnyHealthcare + Age + Income, data = data_train) |>
  step_dummy(HighBP,HighChol,AnyHealthcare,Age,Income)
```

```{r}
tree_mod <- decision_tree(tree_depth = tune(),
                          min_n = 20,
                          cost_complexity = tune()) |>
  set_engine("rpart") |>
  set_mode("classification")


```

```{r}
tree_wkf_1 <- workflow() |>
  add_recipe(tree_rec_1) |>
  add_model(tree_mod)

temp_1 <- tree_wkf_1 |> 
  tune_grid(resamples = data_5_fold, metrics = metric_set(mn_log_loss))
temp_1 |> 
  collect_metrics()

temp_1 |>
  collect_metrics() |>
  arrange(mean)
```

```{r}
tree_wkf_2 <- workflow() |>
  add_recipe(tree_rec_2) |>
  add_model(tree_mod)

temp_2 <- tree_wkf_2 |> 
  tune_grid(resamples = data_5_fold, metrics = metric_set(mn_log_loss))
temp_2 |> 
  collect_metrics()

temp_2 |>
  collect_metrics() |>
  arrange(mean)

```

```{r}
tree_wkf_3 <- workflow() |>
  add_recipe(tree_rec_3) |>
  add_model(tree_mod)

temp_3 <- tree_wkf_3 |> 
  tune_grid(resamples = data_5_fold, metrics = metric_set(mn_log_loss))
temp_3 |> 
  collect_metrics()

temp_3 |>
  collect_metrics() |>
  arrange(mean)
```

```{r}
best_tree_1<-temp_1 |>collect_metrics() |>arrange(mean)
best_tree_2<-temp_2 |>collect_metrics() |>arrange(mean)
best_tree_3<-temp_3 |>collect_metrics() |>arrange(mean)
cbind(c("Tree 1","Tree 2","Tree 3"),rbind(best_tree_1[1,],best_tree_2[1,], best_tree_3[1,]))
```

```{r}

```

















